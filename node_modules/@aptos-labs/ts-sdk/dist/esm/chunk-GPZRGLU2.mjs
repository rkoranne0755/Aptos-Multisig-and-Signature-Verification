import{spawn as c}from"child_process";import{platform as m}from"os";var p=class{async init(e){let{network:t,profile:o,extraArguments:r,showStdout:a}=e,s=["aptos","init",`--network=${t??"local"}`,`--profile=${o??"default"}`];return r&&s.push(...r),this.runCommand(s,a)}async compile(e){let{packageDirectoryPath:t,namedAddresses:o,extraArguments:r,showStdout:a}=e,s=["aptos","move","compile","--package-dir",t],d=this.parseNamedAddresses(o);return s.push(...this.prepareNamedAddresses(d)),r&&s.push(...r),this.runCommand(s,a)}async test(e){let{packageDirectoryPath:t,namedAddresses:o,extraArguments:r,showStdout:a}=e,s=["aptos","move","test","--package-dir",t],d=this.parseNamedAddresses(o);return s.push(...this.prepareNamedAddresses(d)),r&&s.push(...r),this.runCommand(s,a)}async publish(e){let{packageDirectoryPath:t,namedAddresses:o,profile:r,extraArguments:a,showStdout:s}=e,d=["aptos","move","publish","--package-dir",t,`--profile=${r??"default"}`],n=this.parseNamedAddresses(o);return d.push(...this.prepareNamedAddresses(n)),a&&d.push(...a),this.runCommand(d,s)}async createObjectAndPublishPackage(e){let{packageDirectoryPath:t,addressName:o,namedAddresses:r,profile:a,extraArguments:s,showStdout:d}=e,n=["aptos","move","create-object-and-publish-package","--package-dir",t,"--address-name",o,`--profile=${a??"default"}`],i=this.parseNamedAddresses(r);n.push(...this.prepareNamedAddresses(i)),s&&n.push(...s);let u=await this.runCommand(n,d);return{objectAddress:this.extractAddressFromOutput(u.output)}}async upgradeObjectPackage(e){let{packageDirectoryPath:t,objectAddress:o,namedAddresses:r,profile:a,extraArguments:s,showStdout:d}=e,n=["aptos","move","upgrade-object-package","--package-dir",t,"--object-address",o,`--profile=${a??"default"}`],i=this.parseNamedAddresses(r);return n.push(...this.prepareNamedAddresses(i)),s&&n.push(...s),this.runCommand(n,d)}async buildPublishPayload(e){let{outputFile:t,packageDirectoryPath:o,namedAddresses:r,extraArguments:a,showStdout:s}=e,d=["aptos","move","build-publish-payload","--json-output-file",t,"--package-dir",o],n=this.parseNamedAddresses(r);return d.push(...this.prepareNamedAddresses(n)),a&&d.push(...a),this.runCommand(d,s)}async runScript(e){let{compiledScriptPath:t,profile:o,extraArguments:r,showStdout:a}=e,s=["aptos","move","run-script","--compiled-script-path",t,`--profile=${o??"default"}`];return r&&s.push(...r),this.runCommand(s,a)}async runCommand(e,t=!0){return new Promise((o,r)=>{let a=m(),s,d="";a==="win32"?s=c("npx",e,{shell:!0}):s=c("npx",e),s.stdout.on("data",n=>{d+=n.toString()}),t&&(s.stdout.pipe(process.stdout),s.stderr.pipe(process.stderr),process.stdin.pipe(s.stdin)),s.on("close",n=>{n===0?o({output:d}):r(new Error(`Child process exited with code ${n}`))})})}prepareNamedAddresses(e){let t=e.size,o=[];if(t===0)return o;o.push("--named-addresses");let r=[];return e.forEach((a,s)=>{let d=`${s}=${a.toString()}`;r.push(d)}),o.push(r.join(",")),o}parseNamedAddresses(e){let t=new Map;return Object.keys(e).forEach(o=>{let r=e[o];t.set(o,r)}),t}extractAddressFromOutput(e){let t=e.match("Code was successfully deployed to object address (0x[0-9a-fA-F]+)");if(t)return t[1];throw new Error("Failed to extract object address from output")}};export{p as a};
//# sourceMappingURL=chunk-GPZRGLU2.mjs.map